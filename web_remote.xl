// ****************************************************************************
//  web_remote.xl                                                  Tao project 
// ****************************************************************************
// 
//   File Description:
// 
//    Web interface to let you control a presentation from a web browser
//    (computer, tablet, smartphone)
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
//  (C) 2014 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2013 Jerome Forissier <jerome@taodyne.com>
//  (C) 2013-2014 Taodyne SAS
// ****************************************************************************

module_description
    id "2EA5CF1D-5126-4966-ACF4-9916391F5689" 
    name "Web Remote Control"
    description "Control presentations from a web browser (computer, " &
                "tablet, smartphone)"
    import_name "WebRemote"
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.03

module_description "fr",
    name "Télécommande Web"
    description "Télécommandez vos présentations depuis un navigateur web " &
                "(ordinateur, tablette, smartphone)"


// [in/out]
// The desired port for the HTTP server. 8000 by defaut, 0 to get
// a port assigned by the system. If the specified port is in use, the program
// tries 10 consecutive ports and finally tries LOCAL_PORT = 0.
// The variable is set to the actual port used when the server is ready.
WEB_REMOTE_LOCAL_PORT -> 8000

// Set this if you want to register with a gateway and get a public URL
// to access your presentation.
// Example: http://prez.at
WEB_REMOTE_GATEWAY_URL -> ""
WEB_REMOTE_GATEWAY_URL := env "TAO_GATEWAY"

// An arbitratry string used by the gateway to generate a prez ID
// on registration. If SEED is unset or empty, a random ID is allocated.
// Using the same SEED several time usually results in the gateway
// sending the same ID (except if the ID is already in use), so it's
// convenient for testing.
WEB_REMOTE_SEED -> ""


// Set these variables to the name of the functions you want called when the
// local and public server are ready, respectively
// Takes (Port:integer, LocalUrl:text)
WEB_REMOTE_LOCAL_URL_CB -> "wrs_local_cb"
// Takes (PublicUrl:text)
WEB_REMOTE_PUBLIC_URL_CB -> "wrs_public_cb"

// Set by the default callbacks above
WEB_REMOTE_LOCAL_URL -> ""
WEB_REMOTE_PUBLIC_URL -> ""

import NodeJS
import PrezAt

// #2618 module_dir is OK here but not if called from within web_remote_start
wrs_js_src := "var DOCUMENT_DIR='" & document_dir & "'; var HTTP_PORT=" & text WEB_REMOTE_LOCAL_PORT & ";"
wrs_js_src := wrs_js_src & " var PREZ_AT_JS_PATH='" & prez_at_js_path & "';"
wrs_js_src := wrs_js_src & " require('" & module_dir & "/web_remote.js');"
js_src := ""

webremote_start_count -> 0
webremote_need_thumbnail -> 3.0
webremote_refresh_factor -> 0.0
webremote_thumbnail_time -> 5.15
webremote_thumbnail_time Time -> webremote_thumbnail_time := Time

web_remote_start ->
// ----------------------------------------------------------------------------
//   Initialize the web remote
// ----------------------------------------------------------------------------
    locally
        js_src := "var GATEWAY_URL='" & WEB_REMOTE_GATEWAY_URL & "'; "
        js_src := js_src & "var SEED='" & WEB_REMOTE_SEED & "'; "
        js_src := js_src & "var LOCAL_CB='" & WEB_REMOTE_LOCAL_URL_CB & "'; "
        js_src := js_src & "var PUBLIC_CB='" & WEB_REMOTE_PUBLIC_URL_CB & "'; " & wrs_js_src
        nodejs js_src

    locally
        layout "WebRemote-Thumbnails"
        if webremote_need_thumbnail > 0 then
            webremote_need_thumbnail := webremote_need_thumbnail - webremote_refresh_factor * refresh_time
            webremote_refresh_factor := 1.0
            if webremote_need_thumbnail <= 0 then
                writeln "WebRemote: Updating thumbnail " & page_number & "/" & page_count
                screenshot document_dir & "/thumbnails/page" & page_number & ".jpg"
            else
                refresh webremote_need_thumbnail

    on "pagechange",
        nodejs_writeln "setCurrentPage(" & text page_number & ");"
        if transition_ratio = 0.0 then
            webremote_need_thumbnail := webremote_thumbnail_time
            webremote_refresh_factor := 0.0
            webremote_thumbnail_time := 5.15
            refresh_also "WebRemote-Thumbnails"
            writeln "Setting up thumbnail capture at ", webremote_need_thumbnail

    if webremote_start_count <= 2 then
        webremote_start_count := webremote_start_count + 1
        refresh 0
    if webremote_start_count = 2 then
        cached 1.0,
            for i in 1..page_count loop
                // writeln "WebRemote: setting page name " & text i & "/" & text page_count
                // save_page_thumbnail 160, 120, i, document_dir & "/thumbnails/page" & text i & ".jpg", 10.0
                nodejs_writeln "setPageName(" & text i & ", '" & text_replace(page_name i, "'", "\'") & "');"
            // In case a client has connected before this point
            nodejs_writeln "sendPageNames();"

wrs_local_cb Port:integer, LocalUrl:text ->
    writeln "WebRemote: local address is " & LocalUrl
    WEB_REMOTE_LOCAL_URL := LocalUrl

wrs_public_cb PublicUrl:text ->
    writeln "WebRemote: public address is " & PublicUrl
    WEB_REMOTE_PUBLIC_URL := PublicUrl

wp_string -> ""
web_prompt T:text ->
    if wp_string != T then
        nodejs_writeln "sendPrompt('" & text_replace(T, "'", "\'") & "');"
        wp_string := T
